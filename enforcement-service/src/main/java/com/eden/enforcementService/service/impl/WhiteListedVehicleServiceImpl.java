package com.eden.enforcementService.service.impl;import com.eden.enforcementService.common.dto.PaginationDto;import com.eden.enforcementService.common.dto.WhiteListDto;import com.eden.enforcementService.common.mapper.WhitelistDetailsMapper;import com.eden.enforcementService.common.mapper.WhitelistMapper;import com.eden.enforcementService.common.model.entity.Whitelist;import com.eden.enforcementService.common.model.entity.WhitelistDetails;import com.eden.enforcementService.common.request.WhiteListedDetailsRequest;import com.eden.enforcementService.common.request.WhiteListedVehicleRequest;import com.eden.enforcementService.common.request.WhitelistDetailsProjection;import com.eden.enforcementService.exception.BusinessException;import com.eden.enforcementService.repository.WhiteListedDetailsRepository;import com.eden.enforcementService.repository.WhiteListedRepository;import com.eden.enforcementService.service.WhiteListedVehicleService;import com.eden.enforcementService.util.Constants;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Objects;@Servicepublic class WhiteListedVehicleServiceImpl implements WhiteListedVehicleService {    private final WhitelistMapper whitelistMapper;    private final WhiteListedRepository whiteListedRepo;    private final WhiteListedDetailsRepository detailsRepository;    private final WhitelistDetailsMapper detailsMapper;    public WhiteListedVehicleServiceImpl(WhitelistMapper whitelistMapper, WhiteListedRepository whiteListedRepo, WhiteListedDetailsRepository detailsRepository, WhitelistDetailsMapper detailsMapper) {        this.whitelistMapper = whitelistMapper;        this.whiteListedRepo = whiteListedRepo;        this.detailsRepository = detailsRepository;        this.detailsMapper = detailsMapper;    }    @Override    @Transactional    public WhiteListDto addWhiteListedVehicle(WhiteListedVehicleRequest request) {        validateWhiteListRequest(request);        Whitelist whiteList = this.whitelistMapper.toWhitelist(request);        WhiteListedDetailsRequest detailsRequest = WhiteListedDetailsRequest.builder()                .userName(request.getUserName())//                .countryName(request.getCountry())                .description(request.getDescription())                .fromDate(request.getFromDate()).toDate(request.getToDate())                .timeFrom(request.getTimeFrom()).timeTo(request.getTimeTo())                .build();        WhitelistDetails whiteListDetails = this.detailsMapper.toWhitelistDetails(detailsRequest);        // save in master & Details        // if exist in master save On Details        Whitelist whitelistReturned = this.whiteListedRepo.findByPlateNumberEnAndCountry(request.getPlateNumberEn(), request.getCountry());        whiteListDetails.setWhitelist(whitelistReturned);        Whitelist savedWhiteList = null;        if (Objects.isNull(whitelistReturned)) {            savedWhiteList = this.whiteListedRepo.saveAndFlush(whiteList);            List<WhitelistDetails> details = new ArrayList<>();            details.add(whiteListDetails);            savedWhiteList.setWhitelistDetails(details);        }        if (!Objects.isNull(savedWhiteList)) {            whiteListDetails.setWhitelist(savedWhiteList);        }//        WhitelistDetails returnedDetails = this.detailsRepository.findByFromDateAndToDateAndTimeFromAndTimeTo(request.getFromDate(),//                request.getToDate(), request.getTimeFrom(), request.getTimeTo());        List<WhitelistDetailsProjection> detailsByDateAndTime = this.detailsRepository.findByDateAndTime(request.getFromDate(),                request.getToDate(), request.getTimeFrom(), request.getTimeTo()                , request.getOperationId(), request.getPlateNumberEn());//        Long id = detailsByDateAndTime.get(0).getId();//        System.out.println(id);        if (Objects.isNull(detailsByDateAndTime) || detailsByDateAndTime.size() == 0) {            WhitelistDetails whitelistDetails = this.detailsRepository.saveAndFlush(whiteListDetails);        }        return null;    }    public boolean isCurrentlyExistWhitelistVehicle(String plateNumberEn, String country) {        return whiteListedRepo.isExistWhitelistVehicle(plateNumberEn, country, new Date());    }    @Override    public PaginationDto searchPageWhiteList(String searchValue, int page, int limit) {        Pageable pageable = PageRequest.of(page, limit);        Page<Whitelist> whiteList = whiteListedRepo.findAllBySearchValue(searchValue,pageable);        return PaginationDto.builder().                totalElements(whiteList.getTotalElements()).                content(whitelistMapper.toDtoSearchList(whiteList.getContent())).                totalPages(whiteList.getTotalPages()).                build();    }    public void validateWhiteListRequest(WhiteListedVehicleRequest request) {        if (Objects.isNull(request.getPlateNumberEn()) && !request.getPlateNumberEn().isEmpty()) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_PLATE_NUMBER_EN, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getUserName())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_USER_NAME, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getCountry())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_COUNTRY, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getFromDate())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_FROM_DATE, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getToDate())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_TO_DATE, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getTimeFrom())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_FROM_TIME, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getTimeTo())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_TO_TIME, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getToDate())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_TO_DATE, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getOperationId())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_OPERATION_ID, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getColorId())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_COLOR_ID, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getMakeId())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_MAKE_ID, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getModel())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_MODEL, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getDescription())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_WHITELIST_DESC, HttpStatus.NOT_ACCEPTABLE);        }        if (Objects.isNull(request.getType())) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_VEHICLE_TYPE, HttpStatus.NOT_ACCEPTABLE);        }    }}