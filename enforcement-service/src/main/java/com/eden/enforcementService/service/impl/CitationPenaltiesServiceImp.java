package com.eden.enforcementService.service.impl;import com.eden.enforcementService.common.dto.AddingCitationResponseDto;import com.eden.enforcementService.common.dto.CitationPenaltiesProjection;import com.eden.enforcementService.common.dto.CitationRevenueProjection;import com.eden.enforcementService.common.model.entity.CitationPenalties;import com.eden.enforcementService.common.model.entity.OperationViolationPenalties;import com.eden.enforcementService.common.model.entity.Penalty;import com.eden.enforcementService.common.model.entity.Reason;import com.eden.enforcementService.common.model.enums.PenalityStatus;import com.eden.enforcementService.common.model.enums.PenaltyMethod;import com.eden.enforcementService.exception.BusinessException;import com.eden.enforcementService.repository.CitationPenaltiesRepository;import com.eden.enforcementService.service.CitationPenaltiesService;import com.eden.enforcementService.service.OperationViolationPenaltiesService;import com.eden.enforcementService.util.Constants;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Primary;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.*;@Service@Primarypublic class CitationPenaltiesServiceImp implements CitationPenaltiesService {    @Autowired    private OperationViolationPenaltiesService operationViolationPenaltiesService;    @Autowired    private CitationPenaltiesRepository citationPenaltiesRepository;    @Override    public List<CitationPenalties> buildCitationPenaltiesByOperationAndViolation(Long operationId, Long violationId, AddingCitationResponseDto addingCitationResponseDto) {        List<CitationPenalties> citationPenalties = new LinkedList<>();        double totalFees = 0.0;        List<OperationViolationPenalties> operationViolationPenalties = operationViolationPenaltiesService                .getOperationViolationPenaltiesByOperationAndViolation(operationId, violationId);        for (OperationViolationPenalties operationViolationPenalty : operationViolationPenalties) {            PenalityStatus penalityStatus = PenalityStatus.Opened;            Penalty penalty = operationViolationPenalty.getPenalty();            if (penalty.getMethod().equals(PenaltyMethod.EMAIL)) {                penalityStatus = PenalityStatus.Executed;            } else if (penalty.getMethod().equals(PenaltyMethod.MONETARY)) {                totalFees += penalty.getFees();            }            CitationPenalties citationPenalty = CitationPenalties.builder().operationViolationPenalty(operationViolationPenalty).status(penalityStatus).build();            citationPenalties.add(citationPenalty);        }        addingCitationResponseDto.setAmount(totalFees);        return citationPenalties;    }    @Override    public List<CitationPenalties> saveCitationPenalties(List<CitationPenalties> citationPenalties) {        return citationPenaltiesRepository.saveAll(citationPenalties);    }    @Override    public List<CitationPenalties> getCitationPenalties(Long citationId) {        if (Objects.isNull(citationId))            throw new BusinessException(Constants.ErrorKeys.EMPTY_CITATION_ID, HttpStatus.NOT_FOUND);        List<CitationPenalties> penalties = this.citationPenaltiesRepository.findByCitation_Id(citationId);        return penalties;    }    @Transactional    @Override    public void voidCitationPenalties(List<CitationPenalties> openPenalties, String reason, Reason reasonObj) {        if (Objects.isNull(openPenalties) || openPenalties.size() == 0)            throw new BusinessException(Constants.ErrorKeys.EMPTY_PENALTIES, HttpStatus.NOT_ACCEPTABLE);        openPenalties.forEach(citationPenalties -> {            citationPenalties.setStatus(PenalityStatus.Voided);            citationPenalties.setComment(reason);            citationPenalties.setReason(reasonObj);            citationPenalties.setModifiedDate(LocalDateTime.now());            this.citationPenaltiesRepository.save(citationPenalties);        });    }    @Override    public void voidCitationPenalty(CitationPenalties penalty, String reason) {        if (Objects.isNull(penalty))            throw new BusinessException(Constants.ErrorKeys.EMPTY_PENALTIES, HttpStatus.NOT_ACCEPTABLE);        penalty.setStatus(PenalityStatus.Voided);        penalty.setComment(reason);        penalty.setModifiedDate(LocalDateTime.now());        this.citationPenaltiesRepository.save(penalty);    }    @Override    public void settleCitationPenalty(CitationPenalties penalty, Long count) {        if (Objects.isNull(penalty))            throw new BusinessException(Constants.ErrorKeys.EMPTY_PENALTIES, HttpStatus.NOT_ACCEPTABLE);        penalty.setStatus(PenalityStatus.Settled);        penalty.setActionCount(count);        penalty.setModifiedDate(LocalDateTime.now());        this.citationPenaltiesRepository.save(penalty);    }    @Override    public CitationPenalties findCitPenById(Long cit_pen_id) {        if (Objects.isNull(cit_pen_id))            throw new BusinessException(Constants.ErrorKeys.EMPTY_CITATION_PENALTY_ID, HttpStatus.NOT_ACCEPTABLE);        Optional<CitationPenalties> citationPenalties = this.citationPenaltiesRepository.findById(cit_pen_id);        if (!citationPenalties.isPresent()) {            throw new BusinessException(Constants.ErrorKeys.CITATION_PENALTY_NOT_FOUND, HttpStatus.NOT_ACCEPTABLE);        }        return citationPenalties.get();    }    @Override    public void updateCitationPenalty(CitationPenalties citationPenalties) {        if (Objects.isNull(citationPenalties))            throw new BusinessException(Constants.ErrorKeys.EMPTY_CITATION_PENALTY, HttpStatus.NOT_ACCEPTABLE);    }    @Override    public List<CitationPenaltiesProjection> findByMonthAndOperation(String byMonth, Long operationId) {        List<CitationPenaltiesProjection> byMonthAndOperationId = this.citationPenaltiesRepository.findByMonthAndOperationId(byMonth, operationId);        return byMonthAndOperationId;    }    @Override    public List<CitationPenaltiesProjection> findCitationsByOperation(Long operationId) {        LocalDate today = LocalDate.now();        List<CitationPenaltiesProjection> citationPenaltiesProjections = this.citationPenaltiesRepository.findByOperationId(today.toString(), operationId);        return citationPenaltiesProjections;    }    @Override    public List<CitationPenaltiesProjection> findByMonths(List<String> months) {        List<CitationPenaltiesProjection> byMonths = this.citationPenaltiesRepository.findByMonths(months);        return byMonths;    }    @Override    public Map<Long, Double> getRevenueStatisticsByYear(String year) {        Map<Long, Double> result = new LinkedHashMap<>();        for (Long i = 1l; i <= 12l; i++) {            result.put(i, 0.0);        }        List<CitationRevenueProjection> revenueProjections = this.citationPenaltiesRepository.getRevenueStatisticsByYear(year);        revenueProjections.forEach(r -> {            result.put(r.getMonth(), r.getTotalFees());        });        return result;    }}