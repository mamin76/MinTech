package com.eden.enforcementService.service.impl;import com.eden.enforcementService.common.dto.ReasonDto;import com.eden.enforcementService.common.mapper.ReasonMapper;import com.eden.enforcementService.common.model.entity.Reason;import com.eden.enforcementService.common.model.enums.ReasonType;import com.eden.enforcementService.common.request.ReasonRequest;import com.eden.enforcementService.exception.BusinessException;import com.eden.enforcementService.repository.ReasonRepo;import com.eden.enforcementService.service.ReasonService;import com.eden.enforcementService.util.Constants;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import java.util.List;import java.util.Objects;import java.util.stream.Collectors;@Servicepublic class ReasonServiceImpl implements ReasonService {    private final ReasonRepo reasonRepo;    private final ReasonMapper reasonMapper;    @Autowired    public ReasonServiceImpl(ReasonRepo reasonRepo, ReasonMapper reasonMapper) {        this.reasonRepo = reasonRepo;        this.reasonMapper = reasonMapper;    }    @Override    public List<ReasonDto> addReason(List<ReasonRequest> requests) {        validateReasonRequestList(requests);        List<Reason> reasonList = requests.stream().map(reasonRequest -> {            Reason reason = this.reasonMapper.toReason(reasonRequest);            return reason;        }).collect(Collectors.toList());        List<Reason> reasons = this.reasonRepo.saveAll(reasonList);        List<ReasonDto> reasonDtos = this.reasonMapper.toDtoList(reasons);        return reasonDtos;    }    @Override    public List<ReasonDto> getReasons(ReasonType type) {        List<Reason> reasons = this.reasonRepo.findByType(type);        List<ReasonDto> reasonDtos = this.reasonMapper.toDtoList(reasons);        return reasonDtos;    }    @Override    public Reason getReason(Long reasonId, ReasonType aVoid) {        Reason reason = this.reasonRepo.findByIdAndType(reasonId,aVoid);        return reason;    }    private void validateReasonRequestList(List<ReasonRequest> requests) {        if (Objects.isNull(requests) || requests.size() == 0) {            throw new BusinessException(Constants.ErrorKeys.EMPTY_REQUEST, HttpStatus.NOT_ACCEPTABLE);        } else {            requests.forEach(this::validateReasonRequest);        }    }    private void validateReasonRequest(ReasonRequest request) {        if (Objects.isNull(request.getReasonEN()) || request.getReasonEN().isEmpty())            throw new BusinessException(Constants.ErrorKeys.EMPTY_REASON_EN, HttpStatus.NOT_ACCEPTABLE);        if (Objects.isNull(request.getReasonAR()) || request.getReasonAR().isEmpty())            throw new BusinessException(Constants.ErrorKeys.EMPTY_REASON_EN, HttpStatus.NOT_ACCEPTABLE);        if (Objects.isNull(request.getType()))            throw new BusinessException(Constants.ErrorKeys.EMPTY_REASON_EN, HttpStatus.NOT_ACCEPTABLE);    }}